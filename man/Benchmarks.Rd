% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spec_bench-constructors.R
\name{Benchmarks}
\alias{Benchmarks}
\title{Specify Benchmarks}
\usage{
Benchmarks(data, method = c("natural", "fmm", "periodic", "monoH.FC", "hyman"))
}
\arguments{
\item{data}{Data frame with a time variable,
variables \code{q50} and \code{q90}, and possibly one or
more 'by' variables. See below for
details.}

\item{method}{Method for interpolating or
extrapolating benchmarks, if benchmarks
are not provided for all future years.
Passed to function \code{\link[stats:splinefun]{stats::splinefun()}}.
Default is \code{"natural"}.}
}
\value{
An object of class \code{"BayesProj_spec_bench"}.
}
\description{
Specify "benchmarks" for a projection, ie judgments
about the likely range of future values. The benchmarks
are typically passed to function
\code{\link[=project_ts]{project_ts()}}.
}
\section{Format of \code{data}}{


The \code{data} argument must include the following variables.
\itemize{
\item A time variable. The variable name should match the \code{timevar}
argument used with \code{\link[=fit_ts]{fit_ts()}}. The labels must match, or be
a subset of, the labels used in \code{\link[=project_ts]{project_ts()}}.
\item \code{q50}. The 50th quantile (ie the median)
for the value being forecast.
There is a 50\% chance that the true value will
be lower than \code{q50}, and a 50\% chance that it
will be higher.
\item \code{q90}. The 90th percentile for value being forecast.
There is a 90\% chance that the true value will
be lower than \code{q90}, and a 10\% chance that it
will be higher.
}

The \code{data} argument can, in addition, include 'by'
variables identifying sub-populations. These variables
must match, or be a subset of, the variables used with
\code{\link[=fit_ts]{fit_ts()}}.
}

\section{Merging benchmarks}{


Function \code{\link[=project_ts]{project_ts()}} combines benchmarks from
\code{Benchmarks()} with fitted values from \code{\link[=fit_ts]{fit_ts()}}
to make a projection. The combining includes
merging on any 'by' variables in the benchmarks
or fitted values.
}

\section{Interpolating and extrapolating benchmarks}{


Benchmarks do not need to be specified for every
period in the projection interval. Function
\code{\link[=project_ts]{project_ts()}} interpolates or extrapolates
benchmarks for any periods where they are
not specified. The intepolation and extrapolation
is done using function \code{\link[stats:splinefun]{stats::splinefun()}}.
The type of spline is controlled using the
\code{method} argument, which is passed to
\code{\link[stats:splinefun]{stats::splinefun()}}. The default value for
\code{method} is \code{"natural"} (which is different from
the default for \code{\link[stats:splinefun]{stats::splinefun()}}).

Methods \code{"monoH.FC"} and \code{"hyman"} produce
monotonic splines.

Extrapolation should be done with care. In general,
it is safest to explicitly set benchmarks for the
final period of the projection. See the documention
for \code{\link[stats:splinefun]{stats::splinefun()}} for advice on appropriate
methods for extrapolation.
}

\examples{
df <- data.frame(time = 2030,
                 q50 = 1.7,
                 q90 = 2.1)
Benchmarks(df)

df2 <- data.frame(time = c(2030, 2030),
                  area = c("Urban", "Rural"),
                  q50 = c(1.5, 1.8),
                  q90 = c(2, 2.1))
Benchmarks(df2)
}
\seealso{
\itemize{
\item The object created a call to \code{Benchmarks()}
is normally supplied to function \code{project_ts()}.
\item The benchmarks are interpolated and extrapolated
using function \code{\link[stats:splinefun]{stats::splinefun()}}.
}
}
